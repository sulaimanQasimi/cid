import{r as n,j as s}from"./app-DmLyG60K.js";import{c as b,R as K,T as Q,P as U,W as X,b as Z,d as H,D as ee,e as C,O as te}from"./app-layout-CLjHVOb4.js";import{c as f}from"./utils-D8tFNOas.js";import{b as R}from"./button-BtUZRCCO.js";function oe(e,t=[]){let o=[];function r(l,i){const c=n.createContext(i),d=o.length;o=[...o,i];const p=x=>{var N;const{scope:g,children:y,...D}=x,v=((N=g==null?void 0:g[e])==null?void 0:N[d])||c,J=n.useMemo(()=>D,Object.values(D));return s.jsx(v.Provider,{value:J,children:y})};p.displayName=l+"Provider";function A(x,g){var v;const y=((v=g==null?void 0:g[e])==null?void 0:v[d])||c,D=n.useContext(y);if(D)return D;if(i!==void 0)return i;throw new Error(`\`${x}\` must be used within \`${l}\``)}return[p,A]}const a=()=>{const l=o.map(i=>n.createContext(i));return function(c){const d=(c==null?void 0:c[e])||l;return n.useMemo(()=>({[`__scope${e}`]:{...c,[e]:d}}),[c,d])}};return a.scopeName=e,[r,ae(a,...t)]}function ae(...e){const t=e[0];if(e.length===1)return t;const o=()=>{const r=e.map(a=>({useScope:a(),scopeName:a.scopeName}));return function(l){const i=r.reduce((c,{useScope:d,scopeName:p})=>{const x=d(l)[`__scope${p}`];return{...c,...x}},{});return n.useMemo(()=>({[`__scope${t.scopeName}`]:i}),[i])}};return o.scopeName=t.scopeName,o}function _(e,t){if(typeof e=="function")return e(t);e!=null&&(e.current=t)}function re(...e){return t=>{let o=!1;const r=e.map(a=>{const l=_(a,t);return!o&&typeof l=="function"&&(o=!0),l});if(o)return()=>{for(let a=0;a<r.length;a++){const l=r[a];typeof l=="function"?l():_(e[a],null)}}}}function S(...e){return n.useCallback(re(...e),e)}function se(e,t,{checkForDefaultPrevented:o=!0}={}){return function(a){if(e==null||e(a),o===!1||!a.defaultPrevented)return t==null?void 0:t(a)}}var ne=Symbol("radix.slottable");function le(e){const t=({children:o})=>s.jsx(s.Fragment,{children:o});return t.displayName=`${e}.Slottable`,t.__radixId=ne,t}var h="AlertDialog",[ie,Ee]=oe(h,[b]),u=b(),j=e=>{const{__scopeAlertDialog:t,...o}=e,r=u(t);return s.jsx(K,{...r,...o,modal:!0})};j.displayName=h;var ce="AlertDialogTrigger",P=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(Q,{...a,...r,ref:t})});P.displayName=ce;var de="AlertDialogPortal",w=e=>{const{__scopeAlertDialog:t,...o}=e,r=u(t);return s.jsx(U,{...r,...o})};w.displayName=de;var pe="AlertDialogOverlay",T=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(te,{...a,...r,ref:t})});T.displayName=pe;var m="AlertDialogContent",[ue,fe]=ie(m),ge=le("AlertDialogContent"),E=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,children:r,...a}=e,l=u(o),i=n.useRef(null),c=S(t,i),d=n.useRef(null);return s.jsx(X,{contentName:m,titleName:O,docsSlug:"alert-dialog",children:s.jsx(ue,{scope:o,cancelRef:d,children:s.jsxs(Z,{role:"alertdialog",...l,...a,ref:c,onOpenAutoFocus:se(a.onOpenAutoFocus,p=>{var A;p.preventDefault(),(A=d.current)==null||A.focus({preventScroll:!0})}),onPointerDownOutside:p=>p.preventDefault(),onInteractOutside:p=>p.preventDefault(),children:[s.jsx(ge,{children:r}),s.jsx(Ae,{contentRef:i})]})})})});E.displayName=m;var O="AlertDialogTitle",$=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(H,{...a,...r,ref:t})});$.displayName=O;var M="AlertDialogDescription",I=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(ee,{...a,...r,ref:t})});I.displayName=M;var me="AlertDialogAction",F=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(C,{...a,...r,ref:t})});F.displayName=me;var L="AlertDialogCancel",k=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,{cancelRef:a}=fe(L,o),l=u(o),i=S(t,a);return s.jsx(C,{...l,...r,ref:i})});k.displayName=L;var Ae=({contentRef:e})=>{const t=`\`${m}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${m}\` by passing a \`${M}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${m}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return n.useEffect(()=>{var r;document.getElementById((r=e.current)==null?void 0:r.getAttribute("aria-describedby"))||console.warn(t)},[t,e]),null},xe=j,De=P,ve=w,z=T,B=E,G=F,W=k,V=$,Y=I;const Oe=xe,$e=De,ye=ve,q=n.forwardRef(({className:e,...t},o)=>s.jsx(z,{className:f("fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...t,ref:o}));q.displayName=z.displayName;const Ne=n.forwardRef(({className:e,...t},o)=>s.jsxs(ye,{children:[s.jsx(q,{}),s.jsx(B,{ref:o,className:f("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",e),...t})]}));Ne.displayName=B.displayName;const _e=({className:e,...t})=>s.jsx("div",{className:f("flex flex-col space-y-2 text-center sm:text-left",e),...t});_e.displayName="AlertDialogHeader";const be=({className:e,...t})=>s.jsx("div",{className:f("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",e),...t});be.displayName="AlertDialogFooter";const Ce=n.forwardRef(({className:e,...t},o)=>s.jsx(V,{ref:o,className:f("text-lg font-semibold",e),...t}));Ce.displayName=V.displayName;const Re=n.forwardRef(({className:e,...t},o)=>s.jsx(Y,{ref:o,className:f("text-sm text-muted-foreground",e),...t}));Re.displayName=Y.displayName;const Se=n.forwardRef(({className:e,...t},o)=>s.jsx(G,{ref:o,className:f(R(),e),...t}));Se.displayName=G.displayName;const he=n.forwardRef(({className:e,...t},o)=>s.jsx(W,{ref:o,className:f(R({variant:"outline"}),"mt-2 sm:mt-0",e),...t}));he.displayName=W.displayName;export{Oe as A,Ne as a,_e as b,Ce as c,Re as d,be as e,he as f,Se as g,$e as h};
